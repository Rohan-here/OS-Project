[{"/media/rohan/New Volume/Rohan/Projects/Electron/file-manager/react-electron-main/src/App.js":"1","/media/rohan/New Volume/Rohan/Projects/Electron/file-manager/react-electron-main/src/Icons.js":"2","/media/rohan/New Volume/Rohan/Projects/Electron/file-manager/react-electron-main/src/FilesViewer.js":"3"},{"size":2689,"mtime":1650113276308,"results":"4","hashOfConfig":"5"},{"size":1242,"mtime":1612026608000,"results":"6","hashOfConfig":"5"},{"size":1073,"mtime":1650108365241,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"ug8wbt",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/media/rohan/New Volume/Rohan/Projects/Electron/file-manager/react-electron-main/src/App.js",["15"],"import { useState, useMemo, useEffect } from 'react'\nimport { FilesViewer } from './FilesViewer'\n\nconst fs = window.require('fs')\nconst pathModule = window.require('path')\n\nconst { app } = window.require('@electron/remote')\n\nconst formatSize = size => {\n  var i = Math.floor(Math.log(size) / Math.log(1024))\n  return (\n    (size / Math.pow(1024, i)).toFixed(2) * 1 +\n    ' ' +\n    ['B', 'kB', 'MB', 'GB', 'TB'][i]\n  )\n}\n\nfunction App() {\n  const [path, setPath] = useState(app.getAppPath())\n  const [files, setFiles] = useState([]);\n  const [del, setDel] = useState(false);\n  // const files = useMemo(\n  //   () =>\n  //     fs\n  //       .readdirSync(path)\n  //       .map(file => {\n  //         const stats = fs.statSync(pathModule.join(path, file))\n  //         return {\n  //           name: file,\n  //           size: stats.isFile() ? formatSize(stats.size ?? 0) : null,\n  //           directory: stats.isDirectory()\n  //         }\n  //       })\n  //       .sort((a, b) => {\n  //         if (a.directory === b.directory) {\n  //           return a.name.localeCompare(b.name)\n  //         }\n  //         return a.directory ? -1 : 1\n  //       }),\n  //   [path]\n  // )\n\n  useEffect(() =>\n    setFiles(fs\n      .readdirSync(path)\n      .map(file => {\n        const stats = fs.statSync(pathModule.join(path, file))\n        return {\n          name: file,\n          size: stats.isFile() ? formatSize(stats.size ?? 0) : null,\n          directory: stats.isDirectory()\n        }\n      })\n      .sort((a, b) => {\n        if (a.directory === b.directory) {\n          return a.name.localeCompare(b.name)\n        }\n        return a.directory ? -1 : 1\n      })),\n    [path, del])\n\n  const onBack = () => setPath(pathModule.dirname(path))\n  const onOpen = folder => setPath(pathModule.join(path, folder))\n\n  const [searchString, setSearchString] = useState('')\n  const filteredFiles = files.filter(s => s.name.startsWith(searchString))\n\n  // console.log(filteredFiles);\n\n  const deleteFile = (name) => {\n    try {\n      setDel(true);\n      console.log(pathModule.join(path + \"/\" + name));\n      fs.unlinkSync(pathModule.join(path + \"/\" + name));\n      setDel(false);\n    }\n    catch (err) {\n      console.log(err);\n    }\n  }\n\n\n  return (\n    <div className=\"container mt-2\">\n      <h4>{path}</h4>\n      <div className=\"form-group mt-4 mb-2\">\n        <input\n          value={searchString}\n          onChange={event => setSearchString(event.target.value)}\n          className=\"form-control form-control-sm\"\n          placeholder=\"File search\"\n        />\n      </div>\n      <FilesViewer files={filteredFiles} onBack={onBack} onOpen={onOpen} deleteFile={deleteFile} />\n    </div>\n  )\n}\n\nexport default App\n","/media/rohan/New Volume/Rohan/Projects/Electron/file-manager/react-electron-main/src/Icons.js",[],"/media/rohan/New Volume/Rohan/Projects/Electron/file-manager/react-electron-main/src/FilesViewer.js",[],{"ruleId":"16","severity":1,"message":"17","line":1,"column":20,"nodeType":"18","messageId":"19","endLine":1,"endColumn":27},"no-unused-vars","'useMemo' is defined but never used.","Identifier","unusedVar"]